{"version":3,"sources":["redux/Contact/contact-action.js","components/ContactForm/ContactForm.js","redux/Filter/filter-action.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","redux/Contact/contact-reducer.js","redux/Filter/filter-reducer.js","redux/store.js","index.js"],"names":["shortid","require","addContact","createAction","name","number","payload","id","generate","deleteContact","ContactForm","useState","setName","setNumber","dispatch","useDispatch","handleChange","e","currentTarget","value","className","onSubmit","preventDefault","placeholder","onChange","type","pattern","title","required","onFilter","Filter","useSelector","state","filter","actions","target","ContactList","contacts","persistedReducer","items","visibleContacts","contact","toLowerCase","includes","map","onClick","App","createReducer","find","alert","persistConfig","key","storage","rootReducer","combineReducers","persistReducer","store","configureStore","reducer","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"qSACMA,EAAUC,EAAQ,IAEXC,EAAaC,YACxB,eACA,SAAiBC,EAAMC,GACrB,MAAO,CACLC,QAAS,CACPC,GAAIP,EAAQQ,WACZJ,OACAC,cAKKI,EAAgBN,YAAa,kB,GACdA,YAAa,uB,MCX1B,SAASO,IACtB,MAAwBC,mBAAS,IAAjC,mBAAOP,EAAP,KAAaQ,EAAb,KACA,EAA4BD,mBAAS,IAArC,mBAAON,EAAP,KAAeQ,EAAf,KACMC,EAAWC,cACXC,EAAe,SAACC,GACpB,MAAwBA,EAAEC,cAAlBd,EAAR,EAAQA,KAAMe,EAAd,EAAcA,MACd,OAAQf,GACN,IAAK,OACHQ,EAAQO,GACR,MACF,IAAK,SACHN,EAAUM,KAYhB,OACE,uBAAMC,UAAU,cAAcC,SAPX,SAACJ,GACpBA,EAAEK,iBACFR,EAASZ,EAAWE,EAAMC,IAC1BQ,EAAU,IACVD,EAAQ,KAGR,UACE,wBAAOQ,UAAU,cAAjB,iBAEE,uBACEG,YAAY,gEACZH,UAAU,cACVI,SAAUR,EACVG,MAAOf,EACPqB,KAAK,OACLrB,KAAK,OACLsB,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,OAGZ,uBACA,wBAAOR,UAAU,cAAjB,mBAEE,uBACEG,YAAY,4EACZH,UAAU,cACVI,SAAUR,EACVG,MAAOd,EACPoB,KAAK,MACLrB,KAAK,SACLsB,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,OAGZ,uBACA,wBAAQR,UAAU,eAAeK,KAAK,SAAtC,4BC3DC,IAAMI,EAAW1B,YAAa,cCEtB,SAAS2B,IACtB,IAAMX,EAAQY,aAAY,SAACC,GAAD,OAAWA,EAAMC,UACrCnB,EAAWC,cAIjB,OACE,0DAEE,uBACES,SAPe,SAACP,GACpBH,EAASoB,EAAiBjB,EAAEkB,OAAOhB,SAO/BA,MAAOA,EACPM,KAAK,OACLrB,KAAK,SACLsB,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,O,MCdD,SAASQ,IACtB,IAAMC,EAAWN,aAAY,SAACC,GAAD,OAAWA,EAAMM,iBAAiBC,SACzDN,EAASF,aAAY,SAACC,GAAD,OAAWA,EAAMC,UACtCnB,EAAWC,cACbyB,EAAkB,GAMtB,OALIH,IACFG,EAAkBH,EAASJ,QAAO,SAACQ,GAAD,OAChCA,EAAQrC,KAAKsC,cAAcC,SAASV,EAAOS,mBAI7C,oBAAItB,UAAU,cAAd,SACGoB,GACCA,EAAgBI,KAAI,SAACH,GACnB,OACE,qBAAIrB,UAAU,cAAd,UACE,sBAAKA,UAAU,eAAf,UACE,+BAAOqB,EAAQrC,OACf,sBAAMgB,UAAU,SAAhB,SAA0BqB,EAAQpC,YAGpC,wBACEe,UAAU,eACVyB,QAAS,WACP/B,EAASoB,EAAsBO,EAAQlC,MAEzCkB,KAAK,SALP,sBAN+BgB,EAAQlC,SCLtC,SAASuC,IACtB,OACE,gCACE,2CACA,cAAC,EAAD,IACA,0CACA,cAAChB,EAAD,IACA,cAAC,EAAD,O,qDCISW,EAXCM,YAZK,IAYQ,mBAC1B7C,GAZuB,SAAC8B,EAAD,GAAyB,IAAf1B,EAAc,EAAdA,QAClC,IACE0B,EAAMgB,MACJ,SAACP,GAAD,OAAaA,EAAQrC,KAAKsC,gBAAkBpC,EAAQF,KAAKsC,iBAM7D,MAAM,CAAEpC,GAAR,mBAAoB0B,IAHlBiB,MAAM,GAAD,OAAI3C,EAAQF,KAAZ,+BAKoB,cAE1BK,GAAgB,SAACuB,EAAD,OAAU1B,EAAV,EAAUA,QAAV,OACf0B,EAAMC,QAAO,SAACQ,GAAD,OAAaA,EAAQlC,KAAOD,QAHhB,ICTd2B,EAHAc,YAAc,GAAD,eACzBlB,GAAW,SAACG,EAAD,YAAU1B,YCElB4C,EAAgB,CACpBC,IAAK,OACLC,aAEIC,EAAcC,YAAgB,CAClCf,MAAOE,IAEHH,EAAmBiB,YAAeL,EAAeG,GAC1CG,EAAQC,YAAe,CAClCC,QAAS,CAAEpB,mBAAkBL,OAAQA,KAE1B0B,EAAYC,YAAaJ,G,QCVtCK,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACE,cAAC,IAAD,CAAaQ,QAAS,KAAML,UAAWA,EAAvC,SACE,cAACb,EAAD,QAHN,OAQAmB,SAASC,eAAe,W","file":"static/js/main.442453ff.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\r\nconst shortid = require(\"shortid\");\r\n\r\nexport const addContact = createAction(\r\n  \"contact/add\",\r\n  function prepere(name, number) {\r\n    return {\r\n      payload: {\r\n        id: shortid.generate(),\r\n        name,\r\n        number,\r\n      },\r\n    };\r\n  }\r\n);\r\nexport const deleteContact = createAction(\"contact/delete\");\r\nexport const changeFilter = createAction(\"сontact/change\");\r\n","import { useState } from \"react\";\nimport propTypes from \"prop-types\";\nimport \"./ContactForm.css\";\nimport { useDispatch } from \"react-redux\";\nimport { addContact } from \"../../redux/Contact/contact-action\";\nexport default function ContactForm() {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n  const dispatch = useDispatch();\n  const handleChange = (e) => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n      case \"number\":\n        setNumber(value);\n        break;\n      default:\n        break;\n    }\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    dispatch(addContact(name, number));\n    setNumber(\"\");\n    setName(\"\");\n  };\n  return (\n    <form className=\"contactForm\" onSubmit={handleSubmit}>\n      <label className=\"form__label\">\n        Name\n        <input\n          placeholder=\"Введите имя\"\n          className=\"form__input\"\n          onChange={handleChange}\n          value={name}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n      <br />\n      <label className=\"form__label\">\n        Number\n        <input\n          placeholder=\"Введите номер\"\n          className=\"form__input\"\n          onChange={handleChange}\n          value={number}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n      <br />\n      <button className=\"form__button\" type=\"submit\">\n        Add Contact\n      </button>\n    </form>\n  );\n}\n","import { createAction } from \"@reduxjs/toolkit\";\r\nexport const onFilter = createAction(\"filter/add\");\r\n","import propTypes from \"prop-types\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as actions from \"../../redux/Filter/filter-action\";\nexport default function Filter() {\n  const value = useSelector((state) => state.filter);\n  const dispatch = useDispatch();\n  const handleFilter = (e) => {\n    dispatch(actions.onFilter(e.target.value));\n  };\n  return (\n    <label>\n      Find contacts by name\n      <input\n        onChange={handleFilter}\n        value={value}\n        type=\"text\"\n        name=\"filter\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n      />\n    </label>\n  );\n}\n","import \"./ContactList.css\";\nimport propTypes from \"prop-types\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as actions from \"../../redux/Contact/contact-action\";\n\nexport default function ContactList() {\n  const contacts = useSelector((state) => state.persistedReducer.items);\n  const filter = useSelector((state) => state.filter);\n  const dispatch = useDispatch();\n  let visibleContacts = [];\n  if (contacts) {\n    visibleContacts = contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n  return (\n    <ul className=\"contactList\">\n      {visibleContacts &&\n        visibleContacts.map((contact) => {\n          return (\n            <li className=\"contactItem\" key={contact.id}>\n              <div className=\"contactBlock\">\n                <span>{contact.name}</span>\n                <span className=\"nubmer\">{contact.number}</span>\n              </div>\n\n              <button\n                className=\"deleteBotton\"\n                onClick={() => {\n                  dispatch(actions.deleteContact(contact.id));\n                }}\n                type=\"button\"\n              >\n                Delete\n              </button>\n            </li>\n          );\n        })}\n    </ul>\n  );\n}\n","import ContactForm from \"./components/ContactForm\";\nimport Filter from \"./components/Filter/\";\nimport ContactList from \"./components/ContactList/\";\n\n// const useContactsLocalStorage = (key) => {\n//   console.log(window.localStorage.getItem(key));\n//   const [state, setState] = useState(() => {\n//     return JSON.parse(window.localStorage.getItem(key)) ?? [];\n//   });\n//   useEffect(() => {\n//     localStorage.setItem(key, JSON.stringify(state));\n//   }, [key, state]);\n//   return [state, setState];\n// };\n\nexport default function App() {\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport { addContact, deleteContact } from \"./contact-action\";\r\n\r\nconst ContactState = [];\r\nconst addContactReducer = (state, { payload }) => {\r\n  if (\r\n    state.find(\r\n      (contact) => contact.name.toLowerCase() === payload.name.toLowerCase()\r\n    )\r\n  ) {\r\n    alert(`${payload.name} is already in contacts`);\r\n    return;\r\n  }\r\n  return [payload, ...state];\r\n};\r\nconst contact = createReducer(ContactState, {\r\n  [addContact]: addContactReducer,\r\n  [deleteContact]: (state, { payload }) =>\r\n    state.filter((contact) => contact.id !== payload),\r\n  // На случай если я не прав. Просто в таком случае изменяеться весь стейт контактов, а нам нужно только чтобы визуал менялся. так что или я лох или тз не коректно описно;)\r\n  // [changeFilter]: (state, { payload }) =>\r\n  //   state.filter((contact) =>\r\n  //     contact.name.toLowerCase().includes(payload.toLowerCase())\r\n  //   ),\r\n});\r\n\r\nexport default contact;\r\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport { onFilter } from \"./filter-action\";\r\n\r\nconst filter = createReducer(\"\", {\r\n  [onFilter]: (state, { payload }) => payload,\r\n});\r\nexport default filter;\r\n","import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport contact from \"./Contact/contact-reducer\";\r\nimport filter from \"./Filter/filter-reducer\";\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n};\r\nconst rootReducer = combineReducers({\r\n  items: contact,\r\n});\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\nexport const store = configureStore({\r\n  reducer: { persistedReducer, filter: filter },\r\n});\r\nexport const persistor = persistStore(store);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { store, persistor } from \"./redux/store\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n    ;\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}