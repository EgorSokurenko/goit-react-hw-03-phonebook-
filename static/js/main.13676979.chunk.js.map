{"version":3,"sources":["components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","index.js"],"names":["ContactForm","addContact","useState","name","setName","number","setNumber","handleChange","e","currentTarget","value","className","onSubmit","preventDefault","placeholder","onChange","type","pattern","title","required","Filter","ContactList","contacts","onDeliteContact","map","contact","onClick","id","shortid","require","App","key","console","log","window","localStorage","getItem","JSON","parse","state","setState","useEffect","setItem","stringify","useContactsLocalStorage","setContacts","filter","setFilter","VisibleContacts","toLowerCase","includes","find","alert","generate","s","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.13676979.chunk.js","sourcesContent":["import {useState} from \"react\";\nimport propTypes from \"prop-types\";\nimport \"./ContactForm.css\";\nexport default function ContactForm ({addContact}){\n  const [name, setName] = useState('')\n  const [number, setNumber] = useState('')\n  const handleChange = (e) => {\n    const { name, value } = e.currentTarget;\n    switch (name){\n      case 'name':\n        setName(value)\n        break;\n      case 'number':\n        setNumber(value)\n        break;\n        default:break;\n    }\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    addContact(name, number);\n    setNumber('')\n    setName('')\n  };\n    return (\n      <form className=\"contactForm\" onSubmit={handleSubmit}>\n        <label className=\"form__label\">\n          Name\n          <input\n            placeholder=\"Введите имя\"\n            className=\"form__input\"\n            onChange={handleChange}\n            value={name}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <br />\n        <label className=\"form__label\">\n          Number\n          <input\n            placeholder=\"Введите номер\"\n            className=\"form__input\"\n            onChange={handleChange}\n            value={number}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n        <br />\n        <button className=\"form__button\" type=\"submit\">\n          Add Contact\n        </button>\n      </form>\n    );\n}\nContactForm.propTypes = {\n  addContact: propTypes.func,\n};\n","import propTypes from \"prop-types\";\nexport default function Filter({ value, onChange }) {\n  return (\n    <label>\n      Find contacts by name\n      <input\n        onChange={onChange}\n        value={value}\n        type=\"text\"\n        name=\"filter\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n      />\n    </label>\n  );\n}\nFilter.propTypes = {\n  value: propTypes.string,\n  onChange: propTypes.func,\n};\n","import \"./ContactList.css\";\nimport propTypes from \"prop-types\";\nexport default function ContactList({ contacts, onDeliteContact }) {\n  return (\n    <ul className=\"contactList\">\n      {contacts.map((contact) => {\n        return (\n          <li className=\"contactItem\" key={contact.id}>\n            <div className=\"contactBlock\">\n              <sapn>{contact.name}</sapn>\n              <sapn className=\"nubmer\">{contact.number}</sapn>\n            </div>\n\n            <button\n              className=\"deleteBotton\"\n              onClick={() => {\n                onDeliteContact(contact.id);\n              }}\n              type=\"button\"\n            >\n              Delete\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\nContactList.propTypes = {\n  contacts: propTypes.array,\n  onDeliteContact: propTypes.func,\n};\n","import { useState, useEffect } from \"react\";\nimport ContactForm from \"./components/ContactForm\";\nimport Filter from \"./components/Filter/\";\nimport ContactList from \"./components/ContactList/\";\nconst shortid = require(\"shortid\");\n\nconst useContactsLocalStorage = (key) => {\n  console.log(window.localStorage.getItem(key));\n  const [state, setState]=useState(()=>{\n    return JSON.parse(window.localStorage.getItem(key)) ?? [] })\n  useEffect(()=>{\n    localStorage.setItem(key, JSON.stringify(state))\n  },[key,state])\n  return [state, setState]\n}\n\nexport default function App () {\n  const [contacts, setContacts] = useContactsLocalStorage('contacts')\n  const [filter, setFilter] = useState('')\n  const onDeliteContact = (id) => {\n    setContacts(s=>contacts.filter((contact) => contact.id !== id))\n  };\n  const onFilter = (e) => {\n    setFilter(e.currentTarget.value)\n    \n  };\n   const addContact = (name, number) => {\n    if (\n      contacts.find(\n        (contact) => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n    const contact = {\n      id: shortid.generate(),\n      name,\n      number,\n    };\n    setContacts(s=>[contact, ...contacts])\n  };\n\n  const changeFilter = () => {\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n  const VisibleContacts = changeFilter()\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm addContact={addContact} />\n        <h2>Contacts</h2>\n        <Filter value={filter} onChange={onFilter} />\n        <ContactList\n          contacts={VisibleContacts}\n          onDeliteContact={onDeliteContact}\n        />\n      </div>\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}